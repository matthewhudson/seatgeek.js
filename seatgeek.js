// Generated by CoffeeScript 1.4.0
(function() {
  var root, _endpoint, _format, _request, _xhr;

  root = typeof exports !== "undefined" && exports !== null ? exports : (this.seatgeek = {});

  _format = 'json';

  root.events = function(options, callback) {
    return _request('/events/', options, callback);
  };

  root.performers = function(options, callback) {
    return _request('/performers/', options, callback);
  };

  root.venues = function(options, callback) {
    return _request('/venues/', options, callback);
  };

  _request = function(resource, options, callback) {
    var url, _ref,
      _this = this;
    if (typeof options === "function") {
      callback = options;
      options = null;
    }
    _format = (_ref = options != null ? options.format : void 0) != null ? _ref : 'json';
    if (options != null ? options.callback : void 0) {
      _format = 'jsonp';
    }
    url = _endpoint(resource, options);
    return _xhr(url, function(err, res) {
      return callback(err, res);
    });
  };

  _xhr = function(url, callback) {
    var req;
    if (typeof ActiveXObject !== "undefined" && ActiveXObject !== null) {
      req = new ActiveXObject('Microsoft.XMLHTTP');
    } else if (typeof XMLHttpRequest !== "undefined" && XMLHttpRequest !== null) {
      req = new XMLHttpRequest();
    } else if (typeof require !== "undefined" && require !== null) {
      req = new (require('xmlhttprequest').XMLHttpRequest);
    }
    req.onreadystatechange = function() {
      var body;
      if (req.readyState === 4) {
        if (req.status === 200) {
          try {
            if (_format.toLowerCase() === 'json') {
              body = JSON.parse(req.responseText);
            } else if (_format.toLowerCase() === 'xml') {
              body = req.responseText;
            } else {
              body = req.responseText;
            }
          } catch (err) {
            return callback(err, null);
          }
          return callback(null, body);
        } else {
          return callback({
            code: req.status,
            message: req.statusText
          }, null);
        }
      }
    };
    req.open('GET', url, true);
    return req.send(null);
  };

  _endpoint = function(resource, options) {
    var key, params, query_string, url, value;
    url = 'http://api.seatgeek.com/2';
    params = options;
    query_string = [];
    for (key in params) {
      value = params[key];
      key = encodeURIComponent(key);
      value = encodeURIComponent(value);
      query_string.push(key + '=' + value);
    }
    return url + resource + '?' + query_string.join('&');
  };

}).call(this);
